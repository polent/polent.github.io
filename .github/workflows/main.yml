name: Build and Deploy

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      deploy_status: ${{ steps.deploy.outputs.status }}
      changed_files_count: ${{ steps.changes.outputs.file_count }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to compare changes

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
        id: build
      
      - name: Generate build hash
        id: hash
        run: |
          echo "build_hash=$(find dist -type f -exec sha256sum {} \; | sort | sha256sum | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
      
      - name: Check for changes
        id: changes
        run: |
          PREV_HASH_FILE=".previous_build_hash"
          PREV_HASH=""
          NEW_HASH="${{ steps.hash.outputs.build_hash }}"
          
          # Check if we have a previous build hash
          if [ -f "$PREV_HASH_FILE" ]; then
            PREV_HASH=$(cat "$PREV_HASH_FILE")
          fi
          
          # Compare current build with previous
          if [ "$PREV_HASH" = "$NEW_HASH" ]; then
            echo "No changes detected in build output"
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "file_count=0" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in build output"
            echo "changed=true" >> $GITHUB_OUTPUT
            FILE_COUNT=$(find dist -type f | wc -l)
            echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
            echo "$NEW_HASH" > "$PREV_HASH_FILE"
          fi
          
          # Save hash for future runs
          echo "$NEW_HASH" > "$PREV_HASH_FILE"
          
      - name: Deploy changed files to FTP
        id: deploy
        if: steps.changes.outputs.changed == 'true'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}
          protocol: ftps
          local-dir: ./dist/
          server-dir: /
          dangerous-clean-slate: false # Don't delete existing files
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
      
      - name: Set deployment status
        if: always()
        id: status
        run: |
          if [ "${{ steps.changes.outputs.changed }}" == "false" ]; then
            echo "status=unchanged" >> $GITHUB_OUTPUT
          elif [ "${{ steps.deploy.outcome }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload build hash
        uses: actions/upload-artifact@v4
        with:
          name: build-hash
          path: .previous_build_hash
          retention-days: 7

  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check deployment status
        run: |
          if [ "${{ needs.build-and-deploy.outputs.deploy_status }}" == "success" ]; then
            echo "Deployment completed successfully. Deployed ${{ needs.build-and-deploy.outputs.changed_files_count }} files."
            exit 0
          elif [ "${{ needs.build-and-deploy.outputs.deploy_status }}" == "unchanged" ]; then
            echo "No changes detected. Skipped deployment."
            exit 0
          else
            echo "Deployment failed!"
            exit 1
          fi
